---
layout: layouts/base.njk
css: developers.css
title: Developers
nav:
  order: 4
  selection: developers

snippet:
  title: Easy-to-use JavaScript library for developers
  description: >
    Use browser-side JavaScript for building web applications that combine local and remote interactive microservices.
    Qworum's JavaScript library for web frontends is available on the Skypack CDN.
    Here is how Qworum works:
  javascript: |
    // Adds an article to a shopping cart on an e-commerce website.
    // (The end-user is on an article details page.)

    import { Qworum } from "https://cdn.skypack.dev/@qworum/qworum-for-web-pages@1.0.11";

    const
    // Sample article details.
    article = {
      "id"   : "8b1d5802",
      "title": "Classic ankle boots",
      "price": {"EUR": 29.99}
    },

    // Create a Qworum script.
    addToCartScript = Qworum.Script(
      Qworum.Sequence(
        // Add the article to the shopping cart ...
        // (Redirects the end-user to the remote shopping cart service.)
        Qworum.Call(
          ['@', 'shopping cart'], 'https://shopping-cart.example/add-article/',
          {
            name : 'article',
            value: Qworum.Json({article})
          }
        ),

        // ... then go back to the article details page on the e-commerce site.
        Qworum.Goto('index.html')
      )
    ),

    addToCartButton = document.getElementById('add-to-cart-button');

    // Execute the Qworum script when the user clicks on the add-to-cart button.
    addToCartButton.addEventListener('click', async () => {
      // Add the article to the visitor's shopping cart.
      await Qworum.eval(addToCartScript);
    });
---

<section id="developers-resources">
  <h2>Developer Resources</h2>
  <ul>
    <li>
      <a href="specification.njk">Qworum specification</a>: The target audience for this specification are the developers of Qworum applications and services, as well as Qworum platform developers.
    </li>
    <li>
      <a href="/docs/qworum-for-web-pages/latest/" target="_blank">
        JavaScript library for Web Pages (API documentation)</a>: With this JavaScript ES module, websites can use the advanced browser functionality that is provided by
      Qworum's browser extension.
    </li>
    <li>
      <a href="https://github.com/doga/qworum-demo" target="_blank">Demo project</a>:
      This GitHub repository contains the code base for a Qworum-based distributed web application.
    </li>
    {# semantic version does not work !!! #}
    {# <li>
      <a href="https://github.com/doga/qworum-demo-semantic" target="_blank">Demo project 2</a>:
      This GitHub repository contains the code base for a demo project.
      This project uses semantic data instead of JSON for data that is received and returned by service end-points,
      and also for storing session data in the browser.
    </li> #}
    <li>
      <a href="https://gist.github.com/doga/f130bb6c678b109b16bbf2db25dbb853" target="_blank">Demo in
        pseudocode</a>:
      This is a TypeScript pseudocode that describes the demo project. This is an easy way of
      seeing an overview of how the demo is structured.
    </li>
    <li>
      <a href="../demos/">Other demos</a>:
      Here are some integration tests for the Qworum browser extension.
    </li>
    <li>
      <a href="https://marketplace.visualstudio.com/items?itemName=qworum.qworum" target="_blank">
        Visual Studio Code extension</a>: Provides XML snippets for writing static Qworum scripts.
    </li>
    <li>
      <a href="https://groups.google.com/g/qworumnet?hl=en" target="_blank">
        Google group</a>: Visit this group for feature requests, bug reports and general discussion.
    </li>
    <li>
      <a href="mailto:support@qworum.net">
        Email for support</a>.
    </li>
  </ul>

</section>

<section id='local-development'>
  <h2>
    Local development
  </h2>
  <p>
    The Qworum browser extension is enabled for local development by default. The web origins that are enabled for local development are:
  </p>
  <ul>
    <li><code>http://localhost:8080</code>, <code>http://27.0.0.1:8080</code> (the TCP port 8080 is often used in the Java world)</li>
    <li><code>http://localhost:3000</code>, <code>http://27.0.0.1:3000</code> (port 3000 is often used in Deno or Node.js projects)</li>
    <li><code>http://localhost:5500</code>, <code>http://27.0.0.1:5500</code> (5500 is the default port for VS Code's <a
        href="https://marketplace.visualstudio.com/items?itemName=ritwickdey.LiveServer" target="_blank">Live
        Server</a> extension)</li>
    <li><code>http://localhost:5501</code>, <code>http://27.0.0.1:5501</code> (alternative Live Server port)</li>
    <li><code>http://localhost:5502</code>, <code>http://27.0.0.1:5502</code> (alternative Live Server port)</li>
  </ul>
</section>

<section id="downloads">
  <h2>Downloads</h2>

  <div id="downloads-list">
    <figure class="download selected">
      <img src="/assets/images/logos/Unofficial_JavaScript_logo_2.svg" alt="JavaScript icon">
      <figcaption>
        <a href="https://github.com/doga/qworum-for-web-pages" target="_blank">
          Qworum for <br> Web Pages
        </a>
      </figcaption>
    </figure>
    <figure class="download selected">
      <img src="/assets/images/logos/Visual_Studio_Code_1.35_icon.svg" alt="Visual Studio Code icon">
      <figcaption>
        <a href="https://marketplace.visualstudio.com/items?itemName=qworum.qworum" target="_blank">
          Qworum for <br> Visual Studio Code
        </a>
      </figcaption>
    </figure>
  </div>
</section>

<section>
  <h2>{{ snippet.title }}</h2>
  <p>{{ snippet.description }}</p>

  <pre><code class="language-javascript">{{ snippet.javascript }}</code></pre>
</section>

<section id="getting-started">
  <h2>Getting started with Qworum</h2>
  <p>
    You might want to take a look at <a href="../specification/v1/" target="_blank">the Qworum specification</a> and <a href="https://www.infoq.com/articles/qworum-modular-ui-architecture/" target="_blank">this InfoQ article</a> first.
  </p>
  <p>
    Then, your options for getting started with Qworum are as follows.
  </p>
  <section id="starting-from-scratch">
    <h3>Create a new Qworum application from scratch (recommended)</h3>
    <p>
      <a href="https://github.com/doga/qworum-netlify-template" target="_blank">This Qworum application template</a>
      is a suitable starting point for developing a new web-based application. You can then deploy your site to any web hosting service.
    </p>
  </section>
  <section id="webapp-to-qworum-app">
    <h3>Transform an existing web application into a Qworum application</h3>
    <p>
      You can very simply transform a non-Qworum web application into a Qworum application by making sure that:
    </p>
    <ul>
      <li>
        web navigations do not add new entries to the browser tab's history; the <a href="../specification/v1/#browser-workarounds" target="_blank">Qworum specification</a> explains how to do that.
      </li>
      <li>
        links that have a different <a href="https://developer.mozilla.org/en-US/docs/Glossary/Origin" target="_blank">origin</a> than the application's origin open in a new browser tab.
      </li>
    </ul>
    <p>
      What you have at this point is a Qworum application that consists of a single Qworum API endpoint (let's call this the <em>home</em> endpoint). This simple transformation buys you two new web browser capabilities right off the bat:
    </p>
    <ul>
      <li>
        Your application can now <a href="../specification/v1/#call" target="_blank">integrate with remote Qworum services</a>. For example, an e-commerce application can call a remote shopping cart service.
      </li>
      <li>
        You now have the option of modularising your application by moving some parts of the <em>home</em> endpoint into their own dedicated endpoints. For example, an e-commerce application can now add a new <em>view-article</em> endpoint that displays the details of an article that is on sale. Modularizing applications in this manner reduces code complexity and increases code reuse.
      </li>
    </ul>
    <p>
    </p>
  </section>
  <section id="webapp-calls-qworum-service">
    <h3>Calling a remote Qworum service from a non-Qworum web application</h3>
    <p>
      It is possible to call a remote Qworum service from a web application that is not a Qworum application.
    </p>
    <p>
      You don't need to modify your application code to do this, but you do need to define a new Qworum endpoint which is responsible for calling the remote Qworum service. The call must happen in a new browser tab, not the application's original tab.
    </p>
    <p>
      Note that there are some limitations attached to calling remote Qworum services in this way:
    </p>
    <ul>
      <li>
        Creating a new browser tab for each call prevents a smooth user experience.
      </li>
      <li>
        The same
        <a href="../specification/v1/#object" target="_blank">Qworum object</a> cannot be used for every call to a given remote service, which means that remote services cannot run statefully. For example, a shopping cart service that stores its contents in its Qworum object will forget its contents. 
      </li>
    </ul>
    <p>
      Nevertheless, such calls are able to update the data that the application stores in its in-browser or server-side database.
    </p>
  </section>
</section>
