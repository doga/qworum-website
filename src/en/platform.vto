---
layout: layouts/base.vto
title: Platform
nav:
  order: 1
  selection: platform
fullstack:
  title: What is a full-stack API protocol?
  description:
    - Full-stack API protocols cover all three application layers — data, business logic, and presentation. 𝗤𝘄𝗼𝗿𝘂𝗺 𝗶𝘀 𝗰𝘂𝗿𝗿𝗲𝗻𝘁𝗹𝘆 𝘁𝗵𝗲 𝗼𝗻𝗹𝘆 𝗳𝘂𝗹𝗹-𝘀𝘁𝗮𝗰𝗸 𝗔𝗣𝗜 𝘁𝗲𝗰𝗵𝗻𝗼𝗹𝗼𝗴𝘆 in existence.
    - The biggest difference between Qworum and the other protocols is that Qworum structures and modularises application frontends, whereas the others are backend protocols.
    - In that sense, Qworum does not replace the other protocols, but complements them. For example, a Qworum endpoint may very well use REST for connecting to the service's backend. 
    - It is also worth noting that Qworum is not only a protocol that web applications use for calling remote services, but 𝘄𝗵𝗼𝗹𝗲 𝗮𝗽𝗽𝗹𝗶𝗰𝗮𝘁𝗶𝗼𝗻 𝗳𝗿𝗼𝗻𝘁𝗲𝗻𝗱𝘀 𝗰𝗮𝗻 𝗯𝗲 𝗯𝘂𝗶𝗹𝘁 𝗳𝗿𝗼𝗺 𝘀𝗰𝗿𝗮𝘁𝗰𝗵 𝗮𝘀 𝗤𝘄𝗼𝗿𝘂𝗺 𝗔𝗣𝗜𝘀, and in fact this is the recommended way of structuring web applications. In this case, a web application will have a main Qworum endpoint, plus any number of local and remote endpoints that the application may call.
    - Another difference between Qworum and the other protocols is that Qworum sessions are stateful. This means that Qworum attaches runtime states to browser tabs.

---

<h1>
  Platform for distributed web applications
</h1>

<section id="platform">
  <h2>Qworum is the Service Web</h2>
  <p>
    There are currently two different Webs that exist on the World Wide Web:
  </p>
  <ul>
    <li>
      The <dfn>Document Web</dfn>:
      This the Web that most Web developers will be familiar with.
      The primary type of content is the <a href="https://developer.mozilla.org/en-US/docs/Web/HTML"
        target="_blank">HTML page</a>, and the primary content consumers are human users rather than machines.
    </li>
    <li>
      The <dfn>Semantic Web</dfn>:
      This the Web that is intended for machine consumption rather than human consumption.
      The primary type of content is <a href="https://www.w3.org/standards/semanticweb/data" target="_blank">RDF</a>,
      which can be represented using many different but equivalent data formats such as JSON-LD and N-Quads.
    </li>
  </ul>
  <p>
    Qworum adds another type of Web to the mix: the <dfn>Service Web</dfn>. Qworum is used for providing applications
    rather than content.
  </p>
  <figure>
    <img src="/assets/images/platform/the-three-webs.svg" alt="The three Webs">
    <figcaption>Figure 1: The three Webs</figcaption>
  </figure>
  <p>
    Qworum services are:
  </p>
  <ul>
    <li><strong>Interactive</strong>: They can interact with end-users through HTML pages.</li>
    <li><strong>Composable</strong>: They can call, and be called by, other Qworum services. A <dfn>Qworum application</dfn> is simply a special
      service endpoint that is supposed to run indefinitely, and does not normally receive or return data.</li>
  </ul>
  <p>Note that Qworum is conceived as a superset of the Document Web. Although Qworum does not encompass the Semantic Web directly, it allows the use of semantic data as input &amp; output for Qworum APIs, and for storing session data.</p>
  <figure>
    <img src="/assets/images/platform/user-flow.png" style="width: 400px; height: auto;" alt="User flow">
    <figcaption>Figure 2: The user flow when a Qworum application or service calls another Qworum service</figcaption>
  </figure>
</section>

<section id="fullstack-api">
  <h2>{{ fullstack.title }}</h2>
  {{ for p of fullstack.description }}
    <p>{{ p }}</p>
  {{ /for }}
  <figure>
    <img src="/assets/images/qworum-vs-other-protocols.svg" alt="Google Chrome icon">
  </figure>
</section>

{{# <section id="demo">
  <h2>Demonstration — application spanning several DNS domains</h2>
  <p>
    <a href="https://www.youtube.com/watch?v=sSb1mqlFM4Y" target="_blank">This video</a>
    shows an online shop calling a remote shopping cart service.
  </p>
  <p>
    See this demo live at <a href="https://shop.demo.qworum.net" target="_blank">shop.demo.qworum.net</a>.
    Be sure to install the Qworum browser extension.
  </p>
  <p>
    In this demonstration, the e-shop is a Qworum application and the shopping cart is a remote Qworum service.
    Thanks to Qworum, the shopping cart service integrates with the e-shop seamlessly, despite being hosted on
    another DNS domain. (The e-shop is hosted on <code>shop.demo.qworum.net</code> while the shopping cart is hosted
    on <code>cart.demo.qworum.net</code>)
  </p>
  <figure>
    <img src="/assets/images/platform/Qworum-demo-online-shop.png" alt="Video of demo">
    <figcaption>Figure 3: A screenshot of an e-shop Qworum application</figcaption>
  </figure>
  <p>
    Note that:
  </p>
  <ul>
    <li>
      with Qworum the user experience is similar to the current Web, with the exception that the browser's back
      button will be disabled.
    </li>
    <li>
      search engines can't peek inside Qworum services, so if search engine optimization (SEO) is important for you
      then you might want to carefully consider which parts of your application will be implemented as Qworum
      services. For enterprise and business applications SEO is generally not an issue, but consumer applications
      such as an online shop might want to only use remote Qworum services and limit the use of internal Qworum
      services to the parts that should remain out of reach for search engines.
    </li>
  </ul>
  <figure>
    <img src="/assets/images/platform/demo.svg" alt="Schematics of demo">
    <figcaption>Figure 4: A Qworum application using Qworum services that are hosted on other DNS domains</figcaption>
  </figure>
</section> #}}

<section id="security">
  <h2>A secure computing environment</h2>
  <p>
    The Qworum platform conforms to the <a
      href="https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy" target="_blank">same-origin
      policy</a> that is the prevalent security mechanism for browser standards. In particular
    all phases of a given Qworum object are contained in the object's web origin. This ensures that data belonging
    to one web origin is unable to accidentally leak to another origin.
  </p>
</section>
