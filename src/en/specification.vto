---
layout: layouts/base.vto
css: specification.css
url: ./specification/v1/index.html
title: The Qworum script, specification version 1
nav:
  selection: developers
---

<article>
  <header>
    <h1>
      The Qworum script, specification version 1
      <!-- 
        All non-breaking changes can be added without changing the version number. 
        Browsers are supposed to be always up to date.
        Opaque runtimes that aren't up to date will raise faults on newly introduced instructions.
      -->
      <!-- <span class="status-notice">Draft</span> -->
      <span class="metadata">2024.03.23 by Doğa Armangil &lt;d.armangil@qworum.net&gt;</span>
    </h1>
    <h2>Summary</h2>
    <p>Qworum is:</p>
    <ul>
      <li>
        a <strong>module system for Web applications</strong>, where modules may be located anywhere on the Web.
      </li>
      <li>
        a distributed Web application technology.
      </li>
      <li>
        a platform for interactive <a href="https://microservices.io" target="_blank">microservices</a> which bring their own full-page UIs.
      </li>
      <!-- <li>
        <strong>
          the world's first distributed Web API technology,
        </strong>
        complementing JSON-RPC, XML-RPC, gRPC, SOAP, REST.
        Qworum APIs can interact with the end-user, and calls can consist of more than one request-response pair.
      </li> -->
      <li>
        the <em>Service Web</em> that complements
        the HTML-based <em>Document Web</em> and
        the RDF-based <em>Semantic Web</em>.
      </li>
      <li>
        an upgrade to the World Wide Web for improved application support.
      </li>
      <li>
        an
        advanced Web browser feature
        that websites can use.
      </li>
    </ul>

    <p>Qworum defines:</p>
    <ul>
      <li>
        a new top-level Web format called <dfn>the Qworum script</dfn>. These contain executable code rather than
        content as HTML does.
        Web browsers can receive Qworum scripts from Web servers in an XML document. Web pages can also generate
        Qworum scripts using JavaScript.
      </li>
      <li>
        an interpreter for Qworum scripts. This client-side software can be implemented by Web browsers natively or
        as a browser extension.
      </li>
      <li>
        a new client-side storage for storing the execution state of each browser tab. This storage can use
        IndexedDB behind the scenes.
      </li>
    </ul>

    <!-- <p>Qworum is used for:</p>
    <ul>
      <li><strong>application integration</strong>. Web applications can offer Qworum services to other Web applications.</li>
      <li>enhancing <strong>developer productivity</strong>. Applications can use Qworum services remotely without having to implement them themselves.</li>
      <li>improving the <strong> user experience</strong>. Qworum applications can offer dynamic user experiences more easily than other Web applications, because Qworum services can easily be combined to offer dynamic user flows.</li>
    </ul> -->

    <p>
      Qworum is suitable for both:
    </p>
    <ul>
      <li>
        Jamstack <a href="#ref-jamstack">♦︎</a> frontends that are made up of static files, and
      </li>
      <li>
        the more legacy Web frontends that are dynamically generated on the server for each user.
      </li>
    </ul>
  </header>

  <nav id="table-of-contents">
    <h2>Table of Contents</h2>
    <ol>
      <li>
        <a href="#introduction">Introduction</a>
      </li>
      <li>
        <a href="#terminology">Terminology</a>
        <ol>
          <li><a href="#phase">Phase</a></li>
          <li><a href="#single-phase-service-call">Single-Phase Service Call</a></li>
          <li><a href="#multi-phase-service-call">Multi-Phase Service Call</a></li>
          <li><a href="#script">The Qworum Script</a></li>
          <li><a href="#service-composition">Service Composition</a></li>
          <li><a href="#interactive-service">Interactive Service</a></li>
          <li><a href="#execution-state">Execution State</a></li>
          <li><a href="#object">Qworum Object</a></li>
          <li><a href="#class">Qworum Class</a></li>
        </ol>
      </li>

      <li>
        <a href="#instructions">Instructions</a>
        <ol>
          <li><a href="#data"><code>data</code></a></li>
          <li><a href="#call"><code>call</code></a></li>
          <li><a href="#return"><code>return</code></a></li>
          <li><a href="#goto"><code>goto</code></a></li>
          <li><a href="#sequence"><code>sequence</code></a></li>
          <li><a href="#fault"><code>fault</code></a></li>
          <li><a href="#try"><code>try</code></a></li>
        </ol>
      </li>

      <li>
        <a href="#data-values">Data values</a>
        <ol>
          <li><a href="#json"><code>json</code></a></li>
          <li><a href="#semantic"><code>semantic</code></a></li>
        </ol>
      </li>

      <li>
        <a href="#browser-workarounds">Workarounds for browser limitations</a>
        <ol>
          <li><a href="#hyperlinks">Hyperlinks</a></li>
          <li><a href="#using-only-get-requests">Forms</a></li>
        </ol>
      </li>

      <li>
        <a href="#references">References</a>
      </li>
    </ol>
  </nav>

  <section id='introduction'>
    <h2>
      1. Introduction
    </h2>
    <p>
      The World Wide Web <a href="#ref-www">♦︎</a> was initially conceived as a decentralised information system
      consisting of interlinked documents,
      yet its potential as a platform for applications soon became apparent. The ongoing effort that has been
      undertaken by the ICT community since the Web's early days in order to better support Web applications has
      sofar produced various client-side and server-side upgrades to the initial Web, such as JavaScript and
      application servers.
    </p>
    <p>
      Yet there is room for improvement, particularly regarding the decentralisation of the front-ends of Web
      applications. In today's Web, an application is contained within a single Web <dfn>origin</dfn> (example:
      https://example.com) <a href="#ref-origin">♦︎</a>, and frequently even within a single Web page. This limits
      the amount of functionality
      that can be shared amongst application developer teams, and results in considerable duplication of effort.
      (One notable exception to this picture is OAuth-based services which can be called remotely by applications.)
    </p>
    <p>
      Qworum enables new gains in productivity for the software community by making it possible to build Web
      applications that are composed of interactive services ("Qworum services") that are hosted anywhere on the Web
      and that are callable remotely.
    </p>
    <p>
      It is worth noting that Qworum services are of practical use even if the caller of a service has the same
      Web origin as the called service.
      This is because Qworum services can be inserted in any user flow without disrupting it, similarly to functions
      in conventional programming. For example, with Qworum an application no longer needs to pass a return path to
      the login dialog when it requires the end-user to sign in before accessing a restricted page. Again, this is
      similar to conventional programming where a function does not know how the execution proceeds when its own
      execution finishes.
    </p>
    <p>
      As a foretaste, here is how an e-commerce site might call a remote shopping cart service:
    </p>
    <figure>
      <pre><code class="language-xml">
&lt;!-- Qworum script received by the Web browser from an e-commerce site -->
&lt;sequence xmlns="https://qworum.net/ns/v1/instruction/">

  &lt;!-- 1. Show the user's shopping cart-->
  &lt;call object='["@", "shopping cart"]' href="https://shopping-cart.example/view/" />

  &lt;!-- 2. Go back to the e-commerce site -->
  &lt;goto href="/home/" />
&lt;/sequence>
      </code></pre>
      <figcaption>Figure 1.1: Example of a Qworum script received by a Web browser.</figcaption>
    </figure>
  </section>

  <section id="terminology">
    <h2>2. Terminology</h2>
    <section id="phase">
      <h3>2.1. <dfn>Phase</dfn></h3>
      <p>An HTTP(S) <a href="#ref-http">♦︎</a> request-response pair. </p>
      <figure>
        <img src="/assets/images/specification/v1/figure-2.1.svg" alt="Phase">
        <figcaption>Figure 2.1.1: Phase.</figcaption>
      </figure>
    </section>

    <section id="single-phase-service-call">
      <h3>2.2. <dfn>Single-Phase Service Call</dfn></h3>
      <p>A call to a Web API that consists of a single phase. Calls to Web APIs that conform to conventional
        specifications such as REST <a href="#ref-rest">♦︎</a> or XML-RPC <a href="#ref-xml-rpc">♦︎</a> are always
        single-phase calls.</p>
      <figure>
        <img src="/assets/images/specification/v1/figure-2.2.svg" alt="Single-Phase Service Call">
        <figcaption>Figure 2.2.1: Single-Phase Service Call.</figcaption>
      </figure>
    </section>

    <section id='multi-phase-service-call'>
      <h3>2.3. <dfn>Multi-Phase Service Call</dfn></h3>
      <p>A call to a Web API that consists of one or more phases. Calls to Web APIs that conform to the Qworum
        specification are multi-phase calls.</p>
      <p>During a multi-phase call, the first request that is sent by the user agent to the server contains 0, 1 or
        more call arguments. The service then returns a response that:</p>
      <ul>
        <li>contains a <dfn>call result</dfn> (in which case the call is a single-phase call), or</li>
        <li>allows the user agent to initiate a second phase for the current call.</li>
      </ul>
      <p>In this manner, each phase of a multi-phase call can choose to return a result or continue the current call
        with another phase.</p>
      <figure>
        <img src="/assets/images/specification/v1/figure-2.3.svg" alt="">
        <figcaption>Figure 2.3.1: Example of a Multi-Phase Service Call.</figcaption>
      </figure>
      <p>Qworum mandates that each phase of a particular multi-phase call have the same Web origin, otherwise an
        <em>origin</em> <a href="#fault">fault</a> will be raised during run-time.
      </p>
    </section>

    <section id='script'>
      <h3>2.4. <dfn>The Qworum Script</dfn></h3>
      <p>
        Qworum scripts contain instructions that are to be executed by user agents such as Web browsers.
        The root element of Qworum scripts must be an <a href="#instructions">instruction</a>.
        Qworum scripts can also contain <a href="#data-values">data values</a>.
      </p>

      <h4>
        2.4.1 XML scripts
      </h4>
      <p>
        Users agents can receive Qworum scripts from Web servers in XML documents <a href="#ref-xml">♦︎</a> that
        have the content type <code>application/xml</code> or <code>text/xml</code>.
      </p>

      <figure>
        <pre><code class="language-xml">
&lt;!-- Script received by the Web browser from an e-commerce site. -->
&lt;sequence xmlns="https://qworum.net/ns/v1/instruction/">

&nbsp;&nbsp;&lt;!-- Show the user's shopping cart. -->
&nbsp;&nbsp;&lt;call object='["@", "shopping cart"]' href="https://shopping-cart.example/view/" />

&nbsp;&nbsp;&lt;!-- Go back to the e-commerce site. -->
&nbsp;&nbsp;&lt;goto href="/home/" />
&lt;/sequence>
        </code></pre>
        <figcaption>Figure 2.4.1.1: Example of a Qworum script.</figcaption>
      </figure>

      <h4>
        2.4.2 Generating Qworum scripts on the client
      </h4>
      <p>
        Web pages can also use JavaScript for generating and executing Qworum scripts.
        To this end, Qworum makes the <em>qworum-for-web-pages.mjs</em> <a href="#ref-qworum-for-web-pages">♦︎</a>
        JavaScript library available to Web developers.
      </p>
      <p>
        Generating and executing Qworum scripts on the client in this way is equivalent to the user agent receiving
        an XML Qworum script from the URL of the HTML page.
      </p>

      <figure>
        <pre><code class="language-js">
// Use Qworum
import { Qworum } from "path/to/qworum-for-web-pages.mjs";
const
// Qworum script
Script       = Qworum.Script,
// Qworum instructions
Call         = Qworum.Call,
Goto         = Qworum.Goto,
Return       = Qworum.Return,
Sequence     = Qworum.Sequence,
Fault        = Qworum.Fault,
Try          = Qworum.Try,
Data         = Qworum.Data,
// Qworum data value types
Json         = Qworum.Json,
SemanticData = Qworum.SemanticData;

// Example 1: Call the `home` end-point
Qworum.eval(
  Script(Call('@', 'home/'))
);

// Example 2: Return from the current call
/* 
Qworum.eval(
  Script(
    Return(Json(['a', 'b']))
  )
);
*/
        </code></pre>
        <figcaption>Figure 2.4.2.1: Using JavaScript for generating a Qworum script in a Web page.</figcaption>
      </figure>

    </section>

    <section id='service-composition'>
      <h3>2.5. <dfn>Service Composition</dfn></h3>
      <p>The mechanism by which multi-phase calls perform other nested multi-phase calls during their execution.
        Nested calls are performed between two consecutive phases of the call that initiated the nested call.</p>
      <p>When a call is to perform a nested call, one of its phases returns a <a href="#script">script</a> that
        contains a <a href="#call">call</a> instruction. These nested calls are then performed by the user agent
        between two consecutive phases of the call that initiated the nested call.</p>
      <figure>
        <img src="/assets/images/specification/v1/figure-2.5.svg" alt="">
        <figcaption>Figure 2.5.1: Example of a nested service call.</figcaption>
      </figure>
    </section>

    <section id='interactive-service'>
      <h3>2.6. Interactive Service</h3>
      <p>
        A multi-phase service that can interact with the end-user through HTML <a href="#ref-html">♦︎</a> pages
        during its execution.
        <!-- When an interactive service send an HTML page as a response, it is effectively using the end-user as a resource that that helps it continue its execution by starting a new phase. We are naming this pattern an <dfn id='end-user-invocation'>end-user invocation</dfn>. -->
      </p>
      <figure>
        <img src="/assets/images/specification/v1/figure-2.6.svg" alt="">
        <figcaption>Figure 2.6.1: An interactive service call.</figcaption>
      </figure>
      <p>For example, a shopping cart service may provide a method that shows shopping cart contents to the end-user
        by offering this type of interactivity.</p>
    </section>

    <section id='execution-state'>
      <h3>2.7. <dfn>Execution State</dfn></h3>
      <p>
        In Qworum, each Web browser tab has its own execution state, which consists of:
      </p>
      <ul>
        <li>A <dfn id='call-stack'>call stack</dfn> that contains one or more <dfn>call frame</dfn>s. The topmost
          call frame pertains to the call currently being executed; the remaining call frames contain the states of
          calls whose executions are currently suspended. Call frames are used for storing call states in the form
          of <a href="#data">data</a>s (which point to data) and <a href="#object">object</a>s.</li>
        <li>A <dfn id='main-object'>main <a href="#object">object</a></dfn> that is attached to the browser tab. The
          main object is the owner of the first call frame in the call stack.</li>
      </ul>
      <p>A regular browsing session on the World Wide Web can be thought of as a multi-phase service call that
        doesn't use the Qworum-related functionality that the user agent provides (except that browsing different
        Web origins within the same browser tab does not raise an <em>origin</em> <a href="#fault">fault</a>).
        In particular: </p>
      <ul>
        <li>regular Web browsing happens within the bounds of the first call frame in the call stack, and</li>
        <li>the main object remains unused during a regular Web browsing session.</li>
      </ul>
      <figure>
        <img src="/assets/images/specification/v1/figure-2.7.svg" alt="">
        <figcaption>Figure 2.7.1: The execution state of a browser tab.</figcaption>
      </figure>
    </section>

    <section id='object'>
      <h3>2.8. <dfn>Qworum Object</dfn></h3>
      <p>
        In conventional object-oriented programming, objects are used for storing state that is shared between
        multiple calls to one or more functions, which are the object's methods. Qworum is porting this concept into
        the Web environment in the form of Qworum objects.
      </p>
      <p>A Qworum object, then, is a container for run-time state that is shared between different calls. Qworum
        objects are used for storing
        <a href="#data">data</a>s (which point to data) and other Qworum objects.
      </p>
      <p>Qworum objects are needed for storing the states of services such as shopping carts that must remember
        their contents across different calls incoming from an e-commerce site for example. In the absence of Qworum
        objects, Qworum would only be able to support services where each incoming call is independent from
        one another, which is the case for user authentication services and payment processing services among
        others.
      </p>
      <p>Here is how Qworum objects are used in practice:</p>
      <ul>
        <li>Each multi-phase call has a Qworum object that is the owner of the call. When initiating a call, the
          call's owner object is created by the user agent if it does not already exist in the browser tab's
          execution state.</li>
        <li>Each Qworum object has a Web origin which is determined when the object is first used as the owner of a
          call. All phases of all calls which are owned by a Qworum object must have the object's origin, otherwise
          an <em>origin</em> <a href="#fault">fault</a> will be raised during run-time.</li>
        <li>Qworum objects can be stored in call frames, or as the main object of an execution state.</li>
      </ul>
      <figure>
        <img src="/assets/images/specification/v1/figure-2.8.svg" alt="">
        <figcaption>Figure 2.8.1: The Qworum object.</figcaption>
      </figure>
    </section>

    <section id='class'>
      <h3>2.9. <dfn>Qworum Class</dfn></h3>
      <!-- 
      BUG ????? Multiple classes per origin is probably incompatible with storing persistent class data on the server or even the client.
      A Qworum class must be able to read/write persistent data based on: 1. the caller application (or service???) as identified by its origin URL, and 2. the end-user's ID. 
      -->
      <p>Qworum does not mandate that all Qworum objects stored in an execution state have different origins. It
        follows that calls to the same URL can be made using different owner objects, even within the same browser
        tab. This is how the concept of Qworum classes emerges; not as a browser feature, but rather as an aid for
        designing Qworum-based applications and services.</p>
      <p>Formally, we can define Qworum objects to be instances of Qworum classes, and also that each Web origin can
        host any number of Qworum classes.</p>
      <figure>
        <img src="/assets/images/specification/v1/figure-2.9.svg" alt="">
        <figcaption>Figure 2.9.1: Qworum classes and objects.</figcaption>
      </figure>
      <p>Going back to our shopping cart example, we can imagine an e-commerce site that allows its users to create
        several shopping carts on the same shopping cart service, for example one "Home" cart, one "Work" cart and
        one "New year's eve party" cart.</p>
    </section>

  </section>

  <section id='instructions'>
    <h2>3. Instructions</h2>
    <!-- TODO <script type='...'> instruction for non-XML script encodings, such as Ruby-like etc. -->
    <p>
      This section lists the instructions that are available to <a href="#script">Qworum script</a>s.
      When evaluated by the user agent, all instructions will yield a value (which is <a
        href="#data"><code>data</code></a>), except for the <a href="#goto"><code>goto</code></a> and <a
        href="#fault"><code>fault</code></a> instructions.
    </p>
    <p>Qworum instructions that conform to this specification must have the XML namespace <a
        href="#ref-xmlns">♦︎</a>
      <code>https://qworum.net/ns/v1/instruction/</code>.
    </p>
    <p>
      Unless otherwise stated, in the XML code examples below all elements whose tags don't have a prefix have the
      namespace <code>https://qworum.net/ns/v1/instruction/</code>, and all elements whose tags have the prefix
      <code>data</code> have the namespace <code>https://qworum.net/ns/v1/data/</code>.
    </p>

    <section id='data'>
      <h3>3.1. <code>data</code></h3>
      <p>
        The <code>data</code> instruction allows writing to, and reading from, a data container that is stored in an
        <a href="#execution-state">execution state</a>. The current call has read/write access to data in the
        following locations:
      </p>
      <ul>
        <li>the current call frame,</li>
        <li>the current call's owner object,</li>
        <li>nested objects contained in the current call's owner object.</li>
      </ul>

      <p>
        The location of the data container that is being accessed is determined by <code>data</code>'s mandatory
        <code>path</code> attribute.
        This attribute's value is a JSON-encoded array of strings. In these strings, the leading and trailing
        whitespace characters are ignored.
      </p>
      <p id='reserved-path-prefixes'>
        Within this array, some strings are treated differently by the user agent:</p>
      <ul>
        <li>any string that starts with <code>@</code> denotes the current call's owner object, and</li>
        <li>strings starting with <code>$</code> or <code>#</code> are reserved and should not be used at this time.
        </li>
      </ul>

      <h4>3.1.1. Reading from a data container</h4>

      <p>Here is an example of reading data from a data container:</p>

      <figure>
        <pre><code class="language-xml">
&lt;!-- Read the "shopping cart line items" data that is stored locally in the current call. -->
&lt;data path='["shopping cart line items"]' />
        </code></pre>
        <figcaption>Figure 3.1.1.1: Reading data that is stored in the current call.</figcaption>
      </figure>

      <p>Another example:</p>

      <figure>
        <pre><code class="language-xml">
&lt;!-- Read the "shopping cart line items" data that is stored in the current call's owner object. -->
&lt;data path='["@", "shopping cart line items"]' />
        </code></pre>
        <figcaption>Figure 3.1.1.2: Reading data that is stored in the current call's owner object.</figcaption>
      </figure>

      <p>And another:</p>

      <figure>
        <pre><code class="language-xml">
&lt;!-- Read the "line items" data that is stored in the "shopping cart" object -->
&lt;!-- that is in turn stored in the current call's owner object. -->
&lt;data path='["@", "shopping cart", "line items"]' />
        </code></pre>
        <figcaption>Figure 3.1.1.3: Reading data that is stored in the current call's owner object.</figcaption>
      </figure>

      <p>
        When trying to read from a data container that is located inside a Qworum object,
        if the Qworum object does not exist then a
        <code>path</code> <a href="#fault">fault</a> will be raised at run-time.
      </p>

      <p>
        If a data container does not contain a data value (that is, the container has not yet been initialised),
        then trying to read from it will raise a <code>data</code> <a href="#fault">fault</a>.
      </p>

      <!-- <p>Data that is stored has two types of provenances:</p>
      <ul>
        <li>Service compositions — Service calls receive data as arguments, and they return data as a result.</li>
        <li>Web pages — a Web page belonging to a Qworum service or Qworum application can produce data from user inputs or network requests.</li>
      </ul> -->

      <h4>3.1.2. Writing to a data container</h4>

      <p>When writing to a data container, the <code>data</code> instruction must contain one instruction or data
        value. Here is an example:</p>

      <figure>
        <pre><code class="language-xml">
&lt;!-- Clear the "shopping cart line items" data that is stored locally in the current call. -->
&lt;data path='["shopping cart line items"]'>
  &lt;data:json>[]&lt;/data:json>
&lt;/data>
        </code></pre>
        <figcaption>Figure 3.1.2.1: Writing data to a data container.</figcaption>
      </figure>

      <p>And another:</p>

      <figure>
        <pre><code class="language-xml">
&lt;!-- Write the line items received from the shopping cart service -->
&lt;!-- to the "shopping cart line items" data that is stored in the current call. -->
&lt;data path='["shopping cart line items"]'>
  &lt;call object='["@", "shopping cart"]' href='https://shopping-cart.example/view/' />
&lt;/data>
        </code></pre>
        <figcaption>Figure 3.1.2.2: Writing a call result to a data.</figcaption>
      </figure>

      <p>
        When trying to write to a data container that is located in a Qworum object,
        if the Qworum object does not exist then a
        <code>path</code> <a href="#fault">fault</a> will be raised at run-time.
      </p>

    </section>

    <section id="call">
      <h3>3.2. <code>call</code></h3>
      <p>
        The <code>call</code> instruction initiates a <a href="#multi-phase-service-call">multi-phase service
          call</a>. It has two optional attributes:</p>
      <ul>
        <li>
          The <dfn><code>object</code></dfn> attribute specifies the path of the <a href="#object">object</a> that
          owns the call within the <a href="#execution-state">execution state</a>.
          The value of the <code>object</code> attribute is a JSON-encoded array of strings (some string values are
          <a href="#reserved-path-prefixes">reserved</a>). If this attribute is omitted, then the new call's owner
          will be the owner of the current call.
        </li>
        <li>
          The <dfn><code>href</code></dfn> attribute specifies the URL of the call's first phase.
          If this attribute is omitted, then this URL will be the browser tab's current URL.
        </li>
      </ul>

      <figure>
        <pre><code class="language-xml">
&lt;call object='["@", "shopping cart"]' href='view/' />
        </code></pre>
        <figcaption>Figure 3.2.1: A <code>call</code> instruction.</figcaption>
      </figure>

      <p>
        Some of the <a href="#fault"><code>fault</code></a>s that service calls can raise are <code>origin</code>
        and <code>path</code>.
      </p>

      <p>
        Service calls generate an HTTP(S) GET request when evaluated by the browser.
      </p>

      <p>
        Service calls can have data arguments and/or object arguments.
      </p>

      <h4>3.2.1. Calls with data arguments</h4>

      <p>
        Service calls can have named data arguments, each argument containing one instruction or data.

        If a data argument contains an instruction, then the instruction will be evaluated before executing the
        call.
      </p>
      <p>
        Data arguments will be will be made available to the new call on the client side as local data with
        the same names as the data arguments.
      </p>
      <!-- <p>
        In addition, the data arguments can be POSTed to the call's first phase so that the data can be processed
        on the server side. Whether the data will indeed be sent to the server side depends on the value of the
        <code>send</code> attribute of the <code>arguments</code> element. If the value is <code>true</code>, then
        the data will be POSTed. If the <code>send</code> attribute is absent or if its value is <code>false</code>,
        then the data will not be sent to the server.
      </p> -->

      <figure>
        <pre><code class="language-xml">
&lt;call object='["@","shopping cart"]' href='/add-line-items/index.xml'>
  &lt;data-args>
    &lt;data-arg name='line items'> 
      &lt;data:json>
        [{
          "title"   : "Classic ankle boots",
          "price"   : {"EUR": 29.99},
          "quantity": 1
        }]
      &lt;/data:json>
    &lt;/data-arg>
  &lt;/data-args>
&lt;/call>
      </code></pre>
        <figcaption>Figure 3.2.1.1: A <code>call</code> instruction with arguments.</figcaption>
      </figure>
{{# 
      <p id="phase-arguments">
        A <code>call</code> instruction that generates a POST request behaves similarly to an HTML form that
        contains an item named <code>qworum-arguments</code>:
      </p>
      <ul>
        <li>The content type of the request body will be <code>application/x-www-form-urlencoded</code>.</li>
        <li>The value of <code>qworum-arguments</code> will be an XML string that contains the <dfn
            id='phase-arguments'>phase arguments</dfn> document. Note that phase arguments documents have their
          own XML namespace.</li>
      </ul>

      <figure>
        <pre><code class="language-xml">
&lt;data-args 
  xmlns='https://qworum.net/ns/v1/phase-arguments/'
  xmlns:data='https://qworum.net/ns/v1/data/'
>
  &lt;data-arg name='line items'> 
    &lt;data:json>
      [{
        "title"   : "Classic ankle boots",
        "price"   : {"EUR": 29.99},
        "quantity": 1
      }]
    &lt;/data:json>
  &lt;/data-arg>
&lt;/data-args> <!-- TODO: add objects-paramaters element for passing Qworum objects (but first find a use case !!) -->
      </code></pre>
        <figcaption>Figure 3.2.1.2: Example of a phase arguments document that will be encoded in a POST request
        .</figcaption>
      </figure>

      <p>
        Even if a service hasn't received its data arguments on the server side during its first phase, the service
        nevertheless has the option of sending any and all of its data to the server side during any of its later
        phases by using the <a href="#goto"> <code>goto</code></a> instruction.
      </p> #}}

      <h4>3.2.2. Calls with object arguments</h4>
      <!-- <p class="note-to-editor">Use cases?</p> -->
      <p>
        Service calls can receive Qworum objects as arguments. These object arguments will be made available to
        the new call on the client side as local objects that have the same names as the object arguments.
      </p>
      <figure>
        <pre><code class="language-xml">
&lt;call object='["@","shopping cart"]' href='/add-line-items/index.xml'>
  &lt;object-args>
    &lt;!-- The caller is making its logger available to the service it is calling. -->
    &lt;object-arg name='logger' object='["@","logger"]' /> 
  &lt;/object-args>
&lt;/call>
      </code></pre>
        <figcaption>Figure 3.2.2.1: A <code>call</code> instruction that contains object arguments.</figcaption>
      </figure>

    </section>

    <section id="return">
      <h3>3.3. <code>return</code></h3>
      <p>
        The <code>return</code> instruction returns the current <a href="#multi-phase-service-call">multi-phase
          service call</a>. This instruction must contain one instruction or data element.
      </p>

      <figure>
        <pre><code class="language-xml">
&lt;return>
  &lt;data path='["@","line items"]' />
&lt;/return>
        </code></pre>
        <figcaption>Figure 3.3.1: Returning data as a result of the current call.</figcaption>
      </figure>

      <p>If the current call is the main call of the current browser tab, then this instruction will terminate the
        tab's execution.</p>
    </section>

    <section id="goto">
      <h3>3.4. <code>goto</code></h3>
      <p>
        The <code>goto</code> instruction starts a new phase for the current <a
          href="#multi-phase-service-call">multi-phase service call</a>. It has one optional attribute:
      </p>
      <ul>
        <li>
          The <dfn><code>href</code></dfn> attribute specifies the URL of the new phase.
          If this attribute is omitted, then this URL will be the browser tab's current URL.
        </li>
      </ul>

      <figure>
        <pre><code class="language-xml">
&lt;goto href='return.xml' />
        </code></pre>
        <figcaption>Figure 3.4.1: A <code>goto</code> instruction that issues a GET request.</figcaption>
      </figure>

      <!-- <p>
        Similarly to <a href="#call"><code>call</code></a> instructions, <code>goto</code> instructions can also
        have named data arguments, each argument containing one instruction or data. If a data argument contains
        an instruction, then the instruction will be evaluated before executing the call.
        The behavior of <code>goto</code> differs from <code>call</code> in that <code>goto</code>'s data arguments
        are always sent to the server side.
      </p>

      <p>One situation where <code>goto</code> needs to have data arguments is when the internal state of a Qworum
        object is updated from the server side using new data, as is shown in the next figure.</p>

      <figure>
        <pre><code class="language-xml">
&lt;goto href='add-line-items-to-cart.xml'>
&lt;data-args>
&lt;data-arg name='line items to add'>
  &lt;data path='["line items to add"]' />
&lt;/data-arg>

&lt;data-arg name='current line items'>
  &lt;data path='["@","line items"]' />
&lt;/data-arg>
&lt;/data-args>
&lt;/goto>
        </code></pre>
        <figcaption>Figure 3.4.2: A <code>goto</code> instruction that issues a POST request.</figcaption>
      </figure> -->

      <p>
        The <code>goto</code> instruction will raise an <code>origin</code> <a href="#fault"><code>fault</code></a>
        if the <a href="#object">object</a> that the current call belongs to
        has a different origin <a href="#ref-origin">♦︎</a> than this <code>goto</code> phase's origin.
        This is because all phases of all service calls belonging to an object must have the same origin URL.
      </p>
    </section>

    <section id="sequence">
      <h3>3.5. <code>sequence</code></h3>
      <p>
        The <code>sequence</code> instruction contains one or more instructions or data elements, each of which is
        evaluated in turn. This instruction will yield the evaluation result of the last instruction/data in the
        sequence.
      </p>

      <figure>
        <pre><code class="language-xml">
&lt;!-- A shopping cart service directs the user to a remote payment processor. -->
&lt;sequence>

  &lt;!-- 1. Call the payment processing service. -->
  &lt;!-- 2. Store the returned transaction details. -->
  &lt;data path='["@","latest transaction"]'>
    &lt;call object='["@","payment service"]' href="https://payment-processor.example/pay/">
      &lt;data-args>
        &lt;data-arg name="amount to pay">
          &lt;data:json>
            {
              "amount"  : 98.99,
              "currency": "EUR",
            }
          &lt;/data:json>
        &lt;/data-arg>
      &lt;/data-args>
    &lt;/call>
  &lt;/data>

  &lt;!-- 3. Empty the shopping cart, because payment has succeeded (otherwise a fault would have been raised). -->
  &lt;data path='["@","line items"]'>
    &lt;data:json>[]&lt;/data:json>
  &lt;/data>

  &lt;!-- 4. Go to the next phase of the current shopping cart method. -->
  &lt;goto href="paid.html" />

&lt;/sequence>
        </code></pre>
        <figcaption>Figure 3.5.1: A <code>sequence</code> example.</figcaption>
      </figure>

      <p>
        The sequence will not yield a result in the following cases:
      </p>
      <ul>
        <li>the sequence contains a <a href="#goto"><code>goto</code></a>, or</li>
        <li>a <a href="#fault"><code>fault</code></a> is raised when evaluating one of the sequence's instructions,
          or</li>
        <li>the sequence contains a <a href="#fault"><code>fault</code></a> instruction.</li>
      </ul>

    </section>

    <section id="fault">
      <h3>3.6. <code>fault</code></h3> <!-- TODO human-readable i18'ed fault messages and stack trace -->
      <p>
        In computer programming, exceptions are used for disrupting the normal course of execution, because
        an exceptional event has occurred which prevents the program to proceed as intended.
        Exceptions are called "faults" in Qworum parlance.
      </p>
      <p>
        The <code>fault</code> instruction has one optional attribute:
      </p>
      <ul>
        <li>
          The <dfn><code>type</code></dfn> attribute specifies the type of the raised fault.
          If this attribute is omitted, then the fault type will be <code>* service-specific</code>.
          If specified, the <code>type</code> value must not start with <code>*</code>.
        </li>
      </ul>

      <figure>
        <pre><code class="language-xml">
&lt;fault type='payment cancelled' />
        </code></pre>
        <figcaption>Figure 3.6.1: A fault.</figcaption>
      </figure>

      <p>The <code>type</code> attribute's value has the following equivalent forms:</p>
      <ul>
        <li>Case-insensitive — <code>payment cancelled</code> and <code>Payment Cancelled</code> are equivalent.</li>
        <li>Separator whitespace is collapsed into one space character — <code>payment cancelled</code> and <code>payment&nbsp;&nbsp;&nbsp;cancelled</code> are equivalent.</li>
        <li>Whitespace at the beginning and the end are ignored — <code>payment cancelled</code> and <code>&nbsp;&nbsp;&nbsp;&nbsp;payment cancelled&nbsp;&nbsp;&nbsp;</code> are equivalent.</li>
      </ul>

      <p>
        Faults are split into two categories:
      </p>
      <ul>
        <li> <dfn id='platform-faults'>Platform faults</dfn> are faults whose <code>type</code> value starts with <code>*</code>. These can only be raised by the Qworum runtime itself. This means that a Qworum script must not contain a <code>fault</code> instruction whose type is explicitly specified as being a platform fault.</li>
        <li> <dfn id='service-specific-faults'>Service-specific faults</dfn> can be raised by websites; their <code>type</code> value does not start with <code>*</code>. This means that a Qworum script can contain and explicitly raise a service-specific fault.</li>
      </ul>

      <section>
        <h4>3.6.1. Fault types</h4>
        <p>Here is a visual overview of the predefined faults:</p>
        <figure>
          <img src="/assets/images/specification/v1/figure-3.6.1.svg" alt="">
          <figcaption>Figure 3.6.1.1: Qworum fault hierarchy.</figcaption>
        </figure>

        <p><a href="#service-specific-faults">Service-specific faults</a>:</p>
        <ul>
          <li><code>argument</code> is the only predefined service-specific fault. A service call can raise this fault if a call argument is non-conformant or absent.</li>
        </ul>

        <p><a href="#platform-faults">Platform faults</a>:</p>
        <ul>
          <li>
            <code>* entitlement</code> — Raised when a Qworum service tries to use a Qworum feature that it isn't entitled to. These faults are typically raised when evaluating a <code>call</code> instruction.
          </li>
          <li><code>* origin</code> — Raised when a phase of a Qworum object does not have the same origin <a
              href="#ref-origin">♦︎</a> as the Qworum object itself.</li>
          <li><code>* platform fault in script</code> — Raised when a Qworum script contains a platform fault.</li>
          <li>
            <code>* platform entitlement</code> — 
            Raised when a service that is being called isn't part of Qworum's Service Web. This may be because the service is not subscribed to a Qworum platform plan, or the current subscription isn't sufficient and needs to be upgraded.
          </li>
          <li><code>* reference</code> — Raised when the path of a data container or Qworum object can't be resolved.</li>
          <li><code>* runtime</code> — Raised when an unexpected error occurs in Qworum's browser runtime.</li>
          <li><code>* script</code> —  Raised when a Qworum script is non-conformant.</li>
          <li><code>* service</code> — Parent type of all "user space" faults that are caused by a Qworum service in a Qworum session.</li>
          <li>
            <code>* service entitlement</code> — 
            The service that is being called is a paid service, and the caller isn't subscribed to the called service.
          </li>
          <li><code>* service-specific</code> — The parent type of all service-specific faults.</li>
          <li><code>* syntax</code> — Raised when a Qworum script has syntax errors.</li>
          <li><code>* user agent</code> — Parent type of all "kernel space" faults that occur in the user agent.</li>
        </ul>
      </section>
    </section>

    <section id="try">
      <h3>3.7. <code>try</code></h3>
      <p>
        When an instruction in a Qworum script raises a <a href="#fault"><code>fault</code></a>, then the current call will terminate unless the fault is caught by a <code>try</code> instruction.
      </p>

      <p>
        The <code>try</code> instruction contains one or more <dfn id="catch">catch</dfn> clauses, each of which
        contains one or more instructions or data elements. Catch clauses have one optional attribute:
      </p>
      <ul>
        <li>
          The <code>faults</code> attribute is a JSON-encoded array of strings that indicate the fault types that
          are caught by the clause.
          If this attribute is omitted or if the <code>faults</code> array is empty, then the clause will catch all
          faults.
        </li>
      </ul>

      <figure>
        <pre><code class="language-xml">
&lt;!-- Yield the value of a data; initialise it if needed. -->
&lt;try>
  &lt;data path='["shopping cart line items"]' />

  &lt;catch faults='["* reference"]'>
    &lt;!-- Initialise the data. -->
    &lt;data path='["shopping cart line items"]'>
      &lt;data:json>[]&lt;/data:json>
    &lt;/data>
  &lt;/catch>
&lt;/try>
        </code></pre>
        <figcaption>Figure 
          3.7.1: A <code>try</code> instruction used to initialise a data
        .</figcaption>
      </figure>

      <p>
        The <code>try</code> instruction will yield the result of the last instruction or data value it evaluates.
      </p>
    </section>

  </section>

  <section id="data-values">
    <h2>4. Data values</h2>
    <!-- WARNING do not allow XML with non-Qworum namespaces as data values, because we want Qworum scripts that have non-XML encodings.  -->
    <p>An XML element represents a data value if:</p>
    <ul>
      <!-- <li>it has no namespace or its namespace is a URL that has a different origin than <code>https://qworum.com</code>, or</li> -->
      <li>its namespace is <code>https://qworum.net/ns/v1/data/</code>, and the XML element conforms to this
        specification.</li> <!-- TODO: Non-Qworum data namespaces. Also the null namespace? -->
    </ul>

    <section id="json"> 
    {{# TODO add YAML support? #}}
      <h3>4.1. <code>json</code></h3>
      <p>Represents JSON-encoded data <a href="#ref-turtle">♦︎</a>.</p>

      <figure>
        <pre><code class="language-xml">
&lt;!-- E-shop sends a new item to add to the end-user's shopping cart. -->
&lt;data:json>
  {
    "productID": "2",
    "name"     : "XYZ Boots",
    "offers"   : {
      "price"        : "75.95",
      "priceCurrency": "EUR"
    }
  }
&lt;/data:json>
        </code></pre>
        <figcaption>Figure 4.1.1: Example of <code>json</code> data.</figcaption>
      </figure>
    </section>

    <section id="semantic">
      <h3>4.2. <code>semantic</code></h3>
      <p>
        Represents semantic RDF<a href="#ref-rdf">♦︎</a> data. This data can be specified in one of the following formats:
      </p>
      <ul>
        <li>
          {{# <span class="notYetImplemented">Not yet implemented</span> #}}
          <dfn>Turtle</dfn> <a href="#ref-turtle">♦︎</a>. 
          {{# The <code>type</code> attribute has the value <code>turtle</code> for this format. 
          If this attribute is omitted then it is assumed to have the value <code>turtle</code>. #}}
        </li>
        <li>
          {{# <span class="notYetImplemented">Not yet implemented</span> #}}
          <dfn>TriG</dfn> <a href="#ref-trig">♦︎</a>. 
          {{# The <code>type</code> attribute has the value <code>trig</code> for this format.  #}}
        </li>
        {{# <li>
          <dfn>JSON-LD</dfn> <a href="#ref-json-ld">♦︎</a>. 
          The <code>type</code> attribute has the value <code>json-ld</code> for this format. 
        </li> #}}
        <li>
          <dfn>N-Triples</dfn> <a href="#ref-n-triples">♦︎</a>.
          {{# The <code>type</code> attribute has the value <code>n-triples</code> for this format.  #}}
        </li>
        <li>
          <dfn>N-Quads</dfn> <a href="#ref-n-quads">♦︎</a>.
          {{# The <code>type</code> attribute has the value <code>n-quads</code> for this format.  #}}
        </li>
      </ul>

      <figure>
        <pre><code class="language-xml">
&lt;!-- E-shop sends a new item to add to the end-user's shopping cart. -->
&lt;data:semantic>
  &lt;![CDATA[

    PREFIX : &lt;https://schema.org/>

    []
      a :ItemList;
      :itemListElement [
        a :Product;
        :productID "2";
        :name "XYZ Boots";
        :offers [
          a :Offer;
          :price "75.95";
          :priceCurrency "EUR"
        ]
      ].

  ]]>
&lt;/data:semantic>
</code></pre>
        <figcaption>Figure 4.2.1: Example of semantic data written in Turtle/TriG.</figcaption>
      </figure>

      {{# <figure>
        <pre><code class="language-xml">
&lt;!-- E-shop sends a new item to add to the end-user's shopping cart. -->
&lt;data:semantic>
  &lt;![CDATA[

    PREFIX : &lt;https://schema.org/>

    {
      _:lineItems
        a :ItemList;
        :itemListElement _:lineItem1 .

      _:lineItem1
        a :Product;
        :productID "2";
        :name "XYZ Boots";
        :offers [
          a :Offer;
          :price "75.95";
          :priceCurrency "EUR"
        ] .
    }

  ]]>
&lt;/data:semantic>
</code></pre>
        <figcaption>Figure 4.2.2: Example of semantic data written in TriG.</figcaption>
      </figure> #}}

      {{# <figure>
        <pre><code class="language-xml">
&lt;!-- E-shop sends a new item to add to the end-user's shopping cart. -->
&lt;data:semantic type='json-ld'>
  {
    "@context"       : {"@vocab":"https://schema.org/"},
    "@type"          : "ItemList",
    "itemListElement": {
      "@type"    : "Product",
      "productID": "2",
      "name"     : "XYZ Boots",
      "offers"   : {
        "@type"        : "Offer",
        "price"        : "75.95",
        "priceCurrency": "EUR"
      }
    }
  }
&lt;/data:semantic>
</code></pre>
        <figcaption>Figure 4.2.3: Example of semantic data written in JSON-LD.</figcaption>
      </figure> #}}

      {{# <p>
        Semantic data is data that uses the vocabularies that are defined by the <dfn>Semantic Web</dfn> <a
          href="#ref-semanticweb">♦︎</a>.
        In these vocabularies each term has a precise meaning that is understood by any software that understands
        those particular vocabularies.
      </p> #}}
      <!-- <p>
        In effect, what the Semantic Web is trying to do is create a <strong>machine-understandable language that is
          understood by all software</strong>.
        Compare that vision with the current situation where data is generally only understood by the software that
        has created it, and if a second application has to use that data, than the second application's author (or a
        third-party data integration provider) first has to decipher the structure and meaning of the data.
      </p>
      <p>Here are a few reasons for using semantic data, both in transit and at rest:</p>
      <ul>
        <li>The "transform" step can be removed from <dfn>ETL</dfn> <a href="#ref-etl">♦︎</a> operations.</li>
        <li>Applications can have access to additional information about the data they are
          handling, because semantic data generally contains links to other data on the Web, although this isn't mandatory (for example, @id can be omitted in the example above).</li>
        <li>
          AI inference engines can reason about semantic data much more readily than about other types of data such
          as JSON, relational or NoSQL data.
        </li>
        <li>Application developers can write less one-off code for handling data, which improves productivity.</li>
      </ul> -->
    </section>

    <!-- <section id="domain-specific-data">
      <h3>4.3. Domain-Specific Data</h3>
      <p>
        Domain specific data is represented by an XML element without namespace or with a namespace that is a URL that has a different origin than <code>https://qworum.com</code>.
      </p>

      <figure>
        <pre><code class="language-xml">
&lt;contacts>
&lt;contact>
&lt;name>John Smith&lt;/name>
&lt;email>john.smith@example.com&lt;/email>
&lt;/contact>

&lt;contact>
&lt;name>Jean Delacretaz&lt;/name>
&lt;email>jean.delacretaz@example.com&lt;/email>
&lt;/contact>
&lt;/contacts>
</code></pre>
        <figcaption>Figure 4.3.1: Example of domain-specific data.</figcaption>
      </figure>
    </section> -->
  </section>

  <section id="browser-workarounds">
    <h2>5. Workarounds for browser limitations</h2>
    <p>
      The developers of Qworum applications and services must observe some simple rules
      for their Qworum-based software to work properly on browsers.
      These rules are necessary because
      Qworum is implemented as a browser extension, and
      web browsers impose certain constraints on what extensions can do.
      One notable restriction is that extensions are not allowed to prevent the end-user from going back in the tab history. 
    </p>
    <p>
      The following programming constraints will prevent the application UI from going out of sync with the application's session state.
    </p>
    <h3 id="hyperlinks">5.1. Hyperlinks</h3>
    <p>
      In HTML pages, use <code>window.location.replace()</code> for hyperlinks.
    </p>
    <figure>
      <pre><code class="language-html">
&lt;!-- BUG -->
&lt;a href="new_url">
&nbsp;&nbsp;A hyperlink
&lt;a/>
</code></pre>
      <figcaption>Figure 5.1.1: Incorrect way of implementing hyperlinks in a Qworum session.</figcaption>
    </figure>
    <figure>
      <pre><code class="language-html">
&lt;!-- Correct -->
&lt;button onclick="window.location.replace('new_url')">
&nbsp;&nbsp;A hyperlink
&lt;button />
</code></pre>
      <figcaption>Figure 5.1.2: Correct way of implementing hyperlinks in a Qworum session.</figcaption>
    </figure>

    <h3 id="using-only-get-requests">5.2. Forms</h3>
    <p>
      In HTML pages, use AJAX rather than web forms for sending data to servers.
    </p>
    <figure>
      <pre><code class="language-html">
&lt;!-- BUG -->
&lt;form action="/my-handling-form-page" method="post">
  &lt;ul>
    &lt;li>
      &lt;label for="name">Name:&lt;/label>
      &lt;input type="text" id="name" name="user_name" />
    &lt;/li>
    &lt;li>
      &lt;label for="mail">E-mail:&lt;/label>
      &lt;input type="email" id="mail" name="user_email" />
    &lt;/li>
    &lt;li>
      &lt;label for="msg">Message:&lt;/label>
      &lt;textarea id="msg" name="user_message">&lt;/textarea>
    &lt;/li>
    &lt;li class="button">
      &lt;button type="submit">Send your message&lt;/button>
    &lt;/li>
  &lt;/ul>
&lt;/form>
</code></pre>
      <figcaption>Figure 5.2.1: Incorrect way of sending forms during a Qworum session.</figcaption>
    </figure>

    <figure>
      <pre><code class="language-html">
&lt;!-- Correct -->
&lt;ul>
  &lt;li>
    &lt;label for="name">Name:&lt;/label>
    &lt;input type="text" id="name" name="user_name" />
  &lt;/li>
  &lt;li>
    &lt;label for="mail">E-mail:&lt;/label>
    &lt;input type="email" id="mail" name="user_email" />
  &lt;/li>
  &lt;li>
    &lt;label for="msg">Message:&lt;/label>
    &lt;textarea id="msg" name="user_message">&lt;/textarea>
  &lt;/li>
  &lt;li class="button">
    &lt;button onclick="submit()">Send your message&lt;/button>
  &lt;/li>
&lt;/ul></code></pre>
      <figcaption>Figure 5.2.2: Correct way of sending forms during a Qworum session.</figcaption>
    </figure>
  </section>

  <section id="references">
    <h2>6. References</h2>
    <ul>
      <li id="ref-etl">
        <span class="reference">ETL</span>
        <a href="https://en.wikipedia.org/wiki/Extract,_transform,_load">
          Extract, transform, load (Wikipedia)
        </a>
      </li>
      <li id="ref-html">
        <span class="reference">HTML</span>
        <a href="https://developer.mozilla.org/en-US/docs/Web/HTML">
          HTML: HyperText Markup Language
        </a>
      </li>
      <li id="ref-http">
        <span class="reference">HTTP</span>
        <a href="https://en.wikipedia.org/wiki/HTTP/3">
          HTTP/3
        </a>
      </li>
      <li id="ref-jamstack">
        <span class="reference">Jamstack</span>
        <a href="https://jamstack.org/">
          Jamstack.org website
        </a>
      </li>
      <li id="ref-json">
        <span class="reference">JSON</span>
        <a href="https://www.json.org/json-en.html">
          JSON.org website
        </a>
      </li>
      <li id="ref-rdf">
        <span class="reference">RDF</span>
        <a href="https://www.w3.org/TR/rdf11-primer/">
          RDF 1.1 Primer, W3C Working Group Note 24 June 2014
        </a>
      </li>
      <li id="ref-trig">
        <span class="reference">TriG</span>
        <a href="https://www.w3.org/TR/trig/">
          RDF 1.1 TriG, RDF Dataset Language, W3C Recommendation, 25 February 2014
        </a>
      </li>
      <li id="ref-turtle">
        <span class="reference">TriG</span>
        <a href="https://www.w3.org/TR/turtle/">
          RDF 1.1 Turtle, Terse RDF Triple Language, W3C Recommendation, 25 February 2014
        </a>
      </li>
      {{# <li id="ref-json-ld">
        <span class="reference">JSON-LD</span>
        <a href="https://www.w3.org/TR/json-ld11/">
          JSON-LD 1.1,
          A JSON-based Serialization for Linked Data,
          W3C Recommendation, 16 July 2020
        </a> #}}
      </li>
      <li id="ref-n-triples">
        <span class="reference">N-Triples</span>
        <a href="https://www.w3.org/TR/n-triples/">
          RDF 1.1 N-Triples, A line-based syntax for an RDF graph, W3C Recommendation 25 February 2014
        </a>
      </li>
      <li id="ref-n-quads">
        <span class="reference">N-Quads</span>
        <a href="https://www.w3.org/TR/n-quads/">
          RDF 1.1 N-Quads, A line-based syntax for RDF datasets, W3C Recommendation, 25 February 2014
        </a>
      </li>
      <li id="ref-origin">
        <span class="reference">Origin</span>
        <a href="https://developer.mozilla.org/en-US/docs/Glossary/Origin">
          Mozilla Developer Network Documentation
        </a>
      </li>
      <li id="ref-qworum-for-web-pages">
        <span class="reference">qworum-for-web-pages.mjs</span>
        <a href="https://github.com/doga/qworum-for-web-pages">
          Qworum for web pages on GitHub
        </a>
      </li>
      <li id="ref-user-space">
        <span class="reference">User space and kernel space</span>
        <a href="https://en.wikipedia.org/wiki/User_space_and_kernel_space">
          User space and kernel space
        </a>
      </li>
      <li id="ref-rest">
        <span class="reference">REST</span>
        <a href="https://en.wikipedia.org/wiki/Representational_state_transfer">
          Representational state transfer
        </a>
      </li>
      <!-- <li id="ref-turtle">
        <span class="reference">Turtle</span>
        <a href="https://www.w3.org/TR/turtle/">
          RDF 1.1 Turtle,
          Terse RDF Triple Language
        </a>
      </li> -->
      <li id="ref-semanticweb">
        <span class="reference">Semantic Web</span>
        <a href="https://www.w3.org/standards/semanticweb/">
          Semantic Web (W3C)
        </a>
      </li>
      <li id="ref-www">
        <span class="reference">WWW</span>
        <a href="https://en.wikipedia.org/wiki/World_Wide_Web">
          World Wide Web (Wikipedia)
        </a>
      </li>
      <li id="ref-xml">
        <span class="reference">XML</span>
        <a href="https://www.w3.org/TR/2006/REC-xml11-20060816/">
          Extensible Markup Language (XML) 1.1 (Second Edition)
        </a>
      </li>
      <li id="ref-xmlns">
        <span class="reference">XMLNS</span>
        <a href="https://www.w3.org/TR/xml-names/">
          Namespaces in XML 1.0 (Third Edition)
        </a>
      </li>
      <li id="ref-xml-rpc">
        <span class="reference">XML-RPC</span>
        <a href="https://en.wikipedia.org/wiki/XML-RPC">
          XML-RPC
        </a>
      </li>
    </ul>

    <p>∎</p>
  </section>

  <footer>

  </footer>
</article>

<!-- highlight.js (code highlighting) -->
<!-- https://highlightjs.org/download/ -->
<!-- https://github.com/highlightjs/highlight.js -->
<script src="//cdnjs.cloudflare.com/ajax/libs/highlight.js/11.4.0/highlight.min.js"></script>
<script>hljs.highlightAll();</script> 
