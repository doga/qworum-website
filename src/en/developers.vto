---
layout: layouts/base.vto
css: developers.css
title: Developers
nav:
  order: 4
  selection: developers

text:
  resources:
    title: Developer resources
    list:
    - >
      <a href="specification.vto">Qworum specification</a>: The target audience for this specification are the developers of Qworum applications and services.
    - >
      <a href="https://github.com/doga/qworum-application-template" target="_blank">Application template (GitHub)</a>. A simple versioned multi-language template for Qworum-based web applications/APIs.
    - >
      <a href="https://github.com/doga/qworum-for-web-pages" target="_blank">
      JavaScript library for web pages (GitHub)</a>: 
      ES6 module for using the advanced Qworum capabilities of web browsers.
    - >
      <a href="https://github.com/doga/qworum-application-template-with-semantic-data" target="_blank">Application template #2 (GitHub)</a>. In this project, the Qworum API/application uses semantic data instead of JSON. A great starting point for projects wishing to leverage Semantic Web technologies.
    - >
      <a href="https://github.com/doga/object-semantic-mapping" target="_blank">Some Object-Semantic Mapping models (GitHub)</a>. OSM is similar to ORM, except that it is for semantic data. This project contains a couple of OSM models for Qworum applications.
    - >
      <a href="https://github.com/doga/qworum-demo" target="_blank">Demo project (GitHub)</a>:
      Contains the code base for a Qworum-based distributed web application.
    - >
      <a href="../demos/">Other demos</a>:
      Here are some integration tests for the Qworum browser extension.
    - >
      <a href="https://marketplace.visualstudio.com/items?itemName=qworum.qworum" target="_blank">
      Visual Studio Code extension on Visual Studio Marketplace</a>: Provides XML code snippets for writing static Qworum scripts.
    - >
      <a href="mailto:support@qworum.net">Email address for support</a>.
    - >
      <a href="https://groups.google.com/g/qworumnet?hl=en" target="_blank">
      Google group</a>: Visit this group for feature requests, bug reports and general discussion.

  getting_started:
    title: Developing with Qworum 
    p:
    - Qworum services must not add new entries to browser tab histories. To ensure this, Qworum applications must be launched by clicking on a link in another tab, such as <a href="http://basic.template.qworum.net" target="_blank">this one</a>. 
    - This constraint is needed because being able to use the browser's forward/backward buttons can cause the Qworum session state to go out of sync with the UI that the end-user sees.

  transforming_webapps:
    title: Transforming web applications into Qworum services
    p:
    - As a developer, you have the option of leaving your non-Qworum application unchanged and providing a separate Qworum API for calling third-party services and being called by them.
    - Alternatively, you can transform your Web application into a Qworum application and, even better, develop a Qworum application from scratch.
    - Transforming any Web application into a valid Qworum application is a simple matter of making sure that the application does not add new entries to the browser's tab history.
    - At this point your application will have become a valid Qworum API consisting of one endpoint.
    - You can then factor out parts of your monolithic application into separate endpoints.
    - Through refactoring you will then be able to build complex user flows by orchestrating these endpoints.
    - Refactoring also will allow you to make parts of your user flows available to third-party applications.

  local_development:
    title: Local development
    p:
    - >
      The Qworum browser extension is enabled for local development by default. The web origins that are enabled for local development are:
    url_list:
    - >
      <code>http://localhost:8080</code>, <code>http://27.0.0.1:8080</code> (the TCP port 8080 is often used in the Java world)
    - >
      <code>http://localhost:3000</code>, <code>http://27.0.0.1:3000</code> (port 3000 is often used in Deno or Node.js projects)
    - >
      <code>http://localhost:5500</code>, <code>http://27.0.0.1:5500</code> (5500 is the default port for VS Code's <a
        href="https://marketplace.visualstudio.com/items?itemName=ritwickdey.LiveServer" target="_blank">Live
        Server</a> extension)
    - >
      <code>http://localhost:5501</code>, <code>http://27.0.0.1:5501</code> (alternative Live Server port)
    - >
      <code>http://localhost:5502</code>, <code>http://27.0.0.1:5502</code> (alternative Live Server port)

  snippet:
    title: Easy-to-use JavaScript library for developers
    description: >
      In order to use Qworum, web pages need a special JavaScript library that gives access to the Qworum capabilities of browsers. This library is freely available on a JavaScript CDN. Here is how this works:
    javascript: |
      // Adds an article to a shopping cart on an e-commerce website.
      // (The end-user is on an article details page.)

      import { Qworum } from "https://esm.sh/gh/doga/qworum-for-web-pages@1.5.7/mod.mjs";

      const
      // Sample article details.
      article = {
        "id"   : "8b1d5802",
        "title": "Classic ankle boots",
        "price": {"EUR": 29.99}
      },

      // Create a Qworum script.
      addToCartScript = Qworum.Script(
        Qworum.Sequence(
          // Add the article to the shopping cart ...
          // (Redirects the end-user to the remote shopping cart service.)
          Qworum.Call(
            ['@', 'shopping cart'], 'https://shopping-cart.example/add-article/',
            {
              name : 'article',
              value: Qworum.Json({article})
            }
          ),

          // ... then go back to the article details page on the e-commerce site.
          Qworum.Goto('index.html')
        )
      ),

      addToCartButton = document.getElementById('add-to-cart-button');

      // Execute the Qworum script when the user clicks on the add-to-cart button.
      addToCartButton.addEventListener('click', async () => {
        // Add the article to the visitor's shopping cart.
        await Qworum.eval(addToCartScript);
      });
---

<section id="developers-resources">
  <h2>{{ text.resources.title }}</h2>
  <ul>
    {{ for item of text.resources.list }}
      <li>{{ item |> await vto(it) }}</li>
    {{ /for }}
  </ul>
</section>

<section id="downloads">
  <h2>Downloads</h2>

  <div class="downloads-list">
    <figure class="download selected">
      <img src="/assets/images/logos/Unofficial_JavaScript_logo_2.svg" alt="JavaScript icon" width='44px'>
      <figcaption>
        <a href="https://github.com/doga/qworum-for-web-pages" target="_blank">
          Qworum for <br> Web Pages
        </a>
      </figcaption>
    </figure>
    <figure class="download selected">
      <img src="/assets/images/logos/Visual_Studio_Code_1.35_icon.svg" alt="Visual Studio Code icon">
      <figcaption>
        <a href="https://marketplace.visualstudio.com/items?itemName=qworum.qworum" target="_blank">
          Qworum for <br> Visual Studio Code
        </a>
      </figcaption>
    </figure>
  </div>
</section>

<section id="getting-started">
  <h2>{{ text.getting_started.title }}</h2>
  {{ for p of text.getting_started.p }}
    <p>{{ p }}</p>
  {{ /for }}
  <figure>
    <img src="/assets/images/developers/Qworum-apps-vs-webapps.svg" alt="Qworum allows for unbounded nesting levels">
    <figcaption>Qworum applications vs other web applications</figcaption>
  </figure>

  <section id="transforming-webapps">
    <h3>{{ text.transforming_webapps.title }}</h3>
    {{ for p of text.transforming_webapps.p }}
      <p>{{ p }}</p>
    {{ /for }}
  </section>

</section>

<section id='snippet'>
  <h2>{{ text.snippet.title }}</h2>
  <p>{{ text.snippet.description }}</p>
  <pre><code class="javascript">{{ text.snippet.javascript }}</code></pre>
</section>

<section id='local-development'>
  <h2>
    {{ text.local_development.title }}
  </h2>
  {{ for p of text.local_development.p }}
    <p>{{ p }}</p>
  {{ /for }}
  <ul>
    {{ for item of text.local_development.url_list }}
      <li>{{ item }}</li>
    {{ /for }}
  </ul>
</section>
