import lume from 'lume/mod.ts';
import minifyHTML from "lume/plugins/minify_html.ts";
import sitemap from 'lume/plugins/sitemap.ts';
// import date from "lume/plugins/date.ts"; // for displaying file creation time, but not site update time!
import { format as formatDate } from "datetime";
import resolveUrls from "lume/plugins/resolve_urls.ts";

// code snippet highlighter (javascript not supported by default, so add it)
// https://lume.land/plugins/code_highlight/
import codeHighlight from "lume/plugins/code_highlight.ts";
import jsHighlighter from "jsHighlighter";

// my addons
import langdata from 'lume_langdata'; // my published lume plugin
import navbardata from 'lume_navbardata'; // my published lume plugin

// import * as lume_cross_language_content from './lume-addons/my/lume_cross_language_content';
// import {createAfterBuildListener as insertCrossLanguageContent} from 'lume_cross_language_content'; // my published lume post-processor

const
src      = './src',
dest     = './build',
location = new URL('https://qworum.net');

export default
lume({
  src, dest, location
  // server  : {open: true}
})
// Copy static files
.copy('index.html')
.copy('languages.json') // generated by the langdata plugin
.copy('assets')
.copy('docs')
.copy('demos')
.copy('data')
.copy('semantic')
.copy('qworum')

.use(codeHighlight({
  options: {
    classPrefix: 'language-',
  },
  languages: {
    javascript: jsHighlighter,
  }
}))

// https://lume.land/docs/configuration/filters/
.filter('copyrightDate', _content => formatDate(new Date(), 'yyyy') ) // this should be a helper, but helper calls don't return self and so can't be chained.

// // New Nunjucks filters
// .use(date(
//   {formats: {YEAR: 'yyyy'}}
// )) // Example: {{ date | date('YEAR') }}
// // .filter("encodeURIComponent", (uriComponent) => encodeURIComponent(uriComponent)) // Example: {{ encodeURIComponent('dÃ©veloppeur') }}

// // New Nunjucks tags
// .helper(
//   "siteUpdateYear", 
//   () => dateToString('yyyy', new Date()), 
//   { type: "tag" }
// )  // Example: {{ siteUpdateYear }}

// my plugins and processors
.use(langdata())
.use(navbardata())
// .process(['.yaml', '.vto'], (page) => {
//   console.info(`page.src: ${JSON.stringify(page.src)}`)
// })

.use(resolveUrls())
.use(sitemap())
.use(minifyHTML())
// .addEventListener(
//   "afterBuild",
//   crossLanguageContent.createAfterBuildListener(src, dest)
// )
// .addEventListener( 
//   "afterBuild", insertCrossLanguageContent(src, dest)
// )
;
